<?php

/**
 * @file
 * Contain related hooks.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeTypeInterface;
use Drupal\views\ResultRow;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function vactory_cross_content_theme($existing, $type, $theme, $path) {
  return [
    'vcc_block' => [
      'template' => 'vcc-block',
      'variables' => [
        'block' => NULL,
        'title' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function vactory_cross_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id <> "node_type_edit_form") {
    return;
  }

  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();

  $form['vcc'] = [
    '#type' => 'details',
    '#title' => t('Cross content configuration'),
    '#group' => 'additional_settings',
  ];
  $form['vcc']['enabling'] = [
    '#title' => t('Enable Cross Content'),
    '#type' => 'checkbox',
    '#default_value' => $type->getThirdPartySetting('vactory_cross_content', 'enabling', ''),
  ];
  $taxonomies_list = \Drupal::service('vactory')->getTaxonomyList($type->get('type'));
  $taxonomy_field = ['none' => t('-- Select a taxonomy --')];
  foreach ($taxonomies_list as $key => $value) {
    $taxonomy_field[$value[1]] = $value[0];
  }

  $form['vcc']['taxonomy_field'] = [
    '#title' => t('Taxonomy field'),
    '#type' => 'select',
    '#description' => t('Taxonomy field to select cross content'),
    '#options' => $taxonomy_field,
    '#states' => [
      "visible" => [
        "input[name='enabling']" => ["checked" => TRUE],
      ],
    ],
    '#default_value' => $type->getThirdPartySetting('vactory_cross_content', 'taxonomy_field', 'none'),
  ];

  $terms_options = [];
  foreach ($taxonomies_list as $taxonomy) {
    $terms_options[$taxonomy[0]] = \Drupal::service('vactory')->getTermsFromTaxonomy($taxonomy[0], $type->get('type'));
  }

  $form['vcc']['terms'] = [
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Taxonomy terms'),
    '#options' => $terms_options,
    '#states' => [
      "visible" => [
        "input[name='enabling']" => ["checked" => TRUE],
      ],
    ],
    '#default_value' => $type->getThirdPartySetting('vactory_cross_content', 'terms', 'none'),
  ];

  $types_content_types = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->loadMultiple();
  foreach ($types_content_types as $key => $t) {
    $types_content_options[$key] = $t->label();
  }

  $form['vcc']['content_type'] = [
    '#type' => 'select',
    '#title' => t('Content type - Optional -'),
    '#description' => t('If you want to select another content type for the cross content.'),
    '#options' => (!empty($types_content_options)) ? $types_content_options : [],
    '#empty_option' => '-- Select a Content Type --',
    '#multiple' => TRUE,
    '#states' => [
      "visible" => [
        "input[name='enabling']" => ["checked" => TRUE],
      ],
    ],
    '#default_value' => $type->getThirdPartySetting('vactory_cross_content', 'content_type'),
  ];

  $form['vcc']['nombre_elements'] = [
    '#type'          => 'textfield',
    '#title'         => t('Number of nodes to display'),
    '#description'   => t('Select the number of node to display in the cross content block'),
    '#states' => [
      "visible" => [
        "input[name='enabling']" => ["checked" => TRUE],
      ],
    ],
    '#default_value' => $type->getThirdPartySetting('vactory_cross_content', 'nombre_elements', 3),
  ];

  $form['vcc']["more_link"] = [
    '#type' => 'textfield',
    '#title' => t('Choose the redirection link for the more Link , leave it empty to disable it'),
    '#description' => t('Choose the redirection link for the more Link , leave it empty to disable it'),
    '#states' => [
      "visible" => [
        "input[name='enabling']" => ["checked" => TRUE],
      ],
    ],
    '#default_value' => $type->getThirdPartySetting('vactory_cross_content', 'more_link', ''),
  ];

  $form['vcc']["more_link_label"] = [
    '#type' => 'textfield',
    '#title' => t('More Link title'),
    '#description' => t('Choose the title to display for the more Link'),
    '#states' => [
      "visible" => [
        "input[name='enabling']" => ["checked" => TRUE],
      ],
    ],
    '#default_value' => $type->getThirdPartySetting('vactory_cross_content', 'more_link_label', ''),
  ];

  $form['#entity_builders'][] = 'vactory_cross_content_form_node_type_form_builder';
}

/**
 * Entity builder for the node type form with scheduler options.
 */
function vactory_cross_content_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('enabling') == 1) {
    \Drupal::service('vactory')->createVccField($form_state->getFormObject()->getEntity()->id(),
      'field_contenu_lie');
  }
  $type->setThirdPartySetting('vactory_cross_content', 'enabling', $form_state->getValue('enabling'));
  $type->setThirdPartySetting('vactory_cross_content', 'taxonomy_field', $form_state->getValue('taxonomy_field'));
  $type->setThirdPartySetting('vactory_cross_content', 'terms', $form_state->getValue('terms'));
  $type->setThirdPartySetting('vactory_cross_content', 'nombre_elements', $form_state->getValue('nombre_elements'));
  $type->setThirdPartySetting('vactory_cross_content', 'more_link', $form_state->getValue('more_link'));
  $type->setThirdPartySetting('vactory_cross_content', 'more_link_label', $form_state->getValue('more_link_label'));
  $type->setThirdPartySetting('vactory_cross_content', 'content_type', $form_state->getValue('content_type'));
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_cross_content_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    $fields['vcc_normalized'] = BaseFieldDefinition::create('map')
      ->setLabel(t('VCC Normalized'))
      ->setDescription(t('List of nids for json api.'))
      ->setTranslatable(FALSE)
      ->setClass('Drupal\vactory_cross_content\Field\InternalVCCFieldItemList')
      ->setComputed(TRUE)
      ->setReadOnly(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }
  return $fields;
}

/**
 * Implements hook_views_post_execute().
 */
function vactory_cross_content_views_post_execute(ViewExecutable $view) {
  // Check if this is the specific view we want to alter.
  if ($view->id() == 'vactory_cross_content') {
    // Get the number of results in the view.
    $result_count = count($view->result);

    // Get view content type.
    $view_type = $view->filter['type']->value;
    if (empty($view_type)) {
      return;
    }
    $content_type = reset($view_type);
    $type = NodeType::load($content_type);
    if (!isset($type)) {
      return;
    }

    // Get VCC number.
    $vcc_number = $type->getThirdPartySetting('vactory_cross_content', 'nombre_elements', 3);
    $taxonomy_field = $type->getThirdPartySetting('vactory_cross_content', 'taxonomy_field', '');
    if ($result_count > 0 && $result_count < $vcc_number) {
      // Determine how many items to add.
      $items_to_add = $vcc_number - $result_count;

      // Get node terms.
      $term_ids = $view->filter['tid']->value;

      // Load additional items to add.
      $additional_items = _get_additional_items($items_to_add, $content_type, $term_ids, $taxonomy_field);

      // Add the additional items to the view results.
      foreach ($additional_items as $item) {
        $view->result[] = $item;
      }
    }
  }
}

/**
 * Fetch additional items to add to the view results.
 */
function _get_additional_items($count, $node_type, $term_ids, $taxonomy_field) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $query = \Drupal::entityQuery('node')
    ->condition('type', $node_type)
    ->condition('status', 1)
    ->condition('langcode', $language)
    ->accessCheck(TRUE)
    ->range(0, $count);
  if (isset($taxonomy_field) && !empty($taxonomy_field) && $taxonomy_field !== 'none') {
    $query->condition($taxonomy_field, $term_ids, 'NOT IN');
  }
  $result = $query->execute();

  $nids = array_values($result);
  $nodes = Node::loadMultiple($nids);

  // Transform the nodes to the format expected by the view.
  $additional_items = [];
  foreach ($nodes as $node) {
    // Create a result array for each node.
    $row_data = [
      'nid' => $node->id(),
      '_entity' => $node,
      'title' => $node->label(),
    ];

    // Create a ResultRow object with the result array.
    $row = new ResultRow($row_data);

    // Add the ResultRow object to the additional items array.
    $additional_items[] = $row;
  }

  return $additional_items;
}
